import { AssessmentData, ScoreResult } from '@/utils/scoreCalculator';

export interface PDFExportData {
  assessmentData: AssessmentData;
  scoreResult: ScoreResult;
  userProfile?: {
    name?: string;
    email?: string;
    company?: string;
  };
  generatedAt: string;
}

export const generatePDFContent = (data: PDFExportData): string => {
  const { assessmentData, scoreResult, userProfile, generatedAt } = data;
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Investment Readiness Assessment Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
        .score-section { margin: 30px 0; padding: 20px; background: #f8fafc; border-radius: 8px; }
        .score-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }
        .score-item { text-align: center; padding: 15px; background: white; border-radius: 6px; }
        .score-number { font-size: 24px; font-weight: bold; color: #2563eb; }
        .total-score { font-size: 36px; font-weight: bold; text-align: center; margin: 20px 0; }
        .assessment-details { margin: 30px 0; }
        .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
        @media print { body { margin: 20px; } }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="logo">InvestX - Investment Readiness Assessment</div>
        <p>Comprehensive Startup Evaluation Report</p>
        ${userProfile?.name ? `<p><strong>Prepared for:</strong> ${userProfile.name}</p>` : ''}
        ${userProfile?.company ? `<p><strong>Company:</strong> ${userProfile.company}</p>` : ''}
        <p><strong>Generated:</strong> ${new Date(generatedAt).toLocaleDateString()}</p>
      </div>

      <div class="score-section">
        <h2>Overall Investment Readiness Score</h2>
        <div class="total-score">${scoreResult.totalScore}/999</div>
        <div class="score-grid">
          <div class="score-item">
            <div class="score-number">${scoreResult.businessIdea}/100</div>
            <div>Business Idea</div>
            <p style="font-size: 12px; margin-top: 8px;">${scoreResult.businessIdeaExplanation}</p>
          </div>
          <div class="score-item">
            <div class="score-number">${scoreResult.financials}/100</div>
            <div>Financials</div>
            <p style="font-size: 12px; margin-top: 8px;">${scoreResult.financialsExplanation}</p>
          </div>
          <div class="score-item">
            <div class="score-number">${scoreResult.team}/100</div>
            <div>Team</div>
            <p style="font-size: 12px; margin-top: 8px;">${scoreResult.teamExplanation}</p>
          </div>
          <div class="score-item">
            <div class="score-number">${scoreResult.traction}/100</div>
            <div>Traction</div>
            <p style="font-size: 12px; margin-top: 8px;">${scoreResult.tractionExplanation}</p>
          </div>
        </div>
      </div>

      <div class="assessment-details">
        <h2>Assessment Details</h2>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px;">
          <div>
            <h3>Business Foundation</h3>
            <p><strong>Prototype:</strong> ${assessmentData.prototype ? 'Yes' : 'No'}</p>
            <p><strong>Revenue:</strong> ${assessmentData.revenue ? 'Yes' : 'No'}</p>
            <p><strong>MRR:</strong> ${getMRRLabel(assessmentData.mrr)}</p>
            <p><strong>Cap Table:</strong> ${assessmentData.capTable ? 'Yes' : 'No'}</p>
          </div>
          <div>
            <h3>Team & Operations</h3>
            <p><strong>Full-time Team:</strong> ${assessmentData.fullTimeTeam ? 'Yes' : 'No'}</p>
            <p><strong>Team Size:</strong> ${getEmployeeLabel(assessmentData.employees)}</p>
            <p><strong>Stage:</strong> ${getMilestoneLabel(assessmentData.milestones)}</p>
          </div>
        </div>
        <div style="margin-top: 20px;">
          <h3>Funding & Growth</h3>
          <p><strong>Funding Goal:</strong> ${getFundingGoalLabel(assessmentData.fundingGoal)}</p>
          <p><strong>Term Sheets:</strong> ${assessmentData.termSheets ? 'Yes' : 'No'}</p>
          <p><strong>Investors:</strong> ${getInvestorLabel(assessmentData.investors)}</p>
          <p><strong>External Capital:</strong> ${assessmentData.externalCapital ? 'Yes' : 'No'}</p>
        </div>
      </div>

      <div class="footer">
        <p>This report was generated by InvestX Assessment Platform</p>
        <p>For more information, visit our website or contact support</p>
      </div>
    </body>
    </html>
  `;
};

const getMRRLabel = (mrr: string | null): string => {
  switch (mrr) {
    case 'none': return 'No recurring revenue';
    case 'low': return '£1 - £5,000';
    case 'medium': return '£5,001 - £25,000';
    case 'high': return '£25,000+';
    default: return 'Not specified';
  }
};

const getEmployeeLabel = (employees: string | null): string => {
  switch (employees) {
    case '1-2': return '1-2 people';
    case '3-10': return '3-10 people';
    case '11-50': return '11-50 people';
    case '50+': return '50+ people';
    default: return 'Not specified';
  }
};

const getMilestoneLabel = (milestones: string | null): string => {
  switch (milestones) {
    case 'concept': return 'Concept/Idea stage';
    case 'launch': return 'MVP launched';
    case 'scale': return 'Proven model, scaling';
    case 'exit': return 'Preparing for exit';
    default: return 'Not specified';
  }
};

const getFundingGoalLabel = (fundingGoal: string | null): string => {
  switch (fundingGoal) {
    case 'mvp': return 'Build/improve MVP';
    case 'productMarketFit': return 'Achieve product-market fit';
    case 'scale': return 'Scale operations';
    case 'exit': return 'Prepare for exit';
    default: return 'Not specified';
  }
};

const getInvestorLabel = (investors: string | null): string => {
  switch (investors) {
    case 'none': return 'No investors yet';
    case 'angels': return 'Angel investors';
    case 'vc': return 'Venture capital firms';
    case 'lateStage': return 'Late-stage investors';
    default: return 'Not specified';
  }
};

export const exportToPDF = async (data: PDFExportData): Promise<void> => {
  const htmlContent = generatePDFContent(data);
  
  // Create a new window for printing
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    throw new Error('Unable to open print window. Please check your popup blocker settings.');
  }
  
  printWindow.document.write(htmlContent);
  printWindow.document.close();
  
  // Trigger print dialog
  printWindow.print();
  
  // Close the window after printing
  setTimeout(() => {
    printWindow.close();
  }, 1000);
};
