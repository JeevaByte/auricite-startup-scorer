
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Share2, Copy, Mail, MessageSquare, Linkedin, Twitter, Download, QrCode } from 'lucide-react';
import { ScoreResult } from '@/utils/scoreCalculator';
import QRCode from 'react-qr-code';

interface EnhancedShareDialogProps {
  scoreResult: ScoreResult;
}

export const EnhancedShareDialog = ({ scoreResult }: EnhancedShareDialogProps) => {
  const [shareUrl, setShareUrl] = useState('');
  const [customMessage, setCustomMessage] = useState(`ðŸš€ Just completed my startup investment readiness assessment and scored ${scoreResult.totalScore}/999!

Key highlights:
â€¢ Business Idea: ${scoreResult.businessIdea}/100
â€¢ Financials: ${scoreResult.financials}/100  
â€¢ Team: ${scoreResult.team}/100
â€¢ Traction: ${scoreResult.traction}/100

Ready to accelerate my funding journey! ðŸ’ª`);
  const [showQRCode, setShowQRCode] = useState(false);
  const { toast } = useToast();

  // Generate shareable URL with embedded results
  const generateShareUrl = () => {
    const params = new URLSearchParams({
      shared: 'true',
      score: scoreResult.totalScore.toString(),
      bi: scoreResult.businessIdea.toString(),
      fin: scoreResult.financials.toString(),
      team: scoreResult.team.toString(),  
      trac: scoreResult.traction.toString()
    });
    
    const url = `${window.location.origin}?${params.toString()}`;
    setShareUrl(url);
    return url;
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: "Link copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Please copy the link manually",
        variant: "destructive",
      });
    }
  };

  const shareViaEmail = () => {
    const url = generateShareUrl();
    const subject = 'My Startup Investment Readiness Results';
    const body = `${customMessage}\n\nView my detailed results: ${url}`;
    window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  };

  const shareViaLinkedIn = () => {
    const url = generateShareUrl();
    const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
    window.open(linkedInUrl, '_blank', 'width=600,height=600');
  };

  const shareViaTwitter = () => {
    const url = generateShareUrl();
    const tweetText = `${customMessage.slice(0, 200)}... ${url}`;
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`;
    window.open(twitterUrl, '_blank', 'width=600,height=600');
  };

  const downloadResultsImage = async () => {
    // Create a canvas to generate an image of the results
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return;
    
    canvas.width = 800;
    canvas.height = 600;
    
    // Background
    ctx.fillStyle = '#f8fafc';
    ctx.fillRect(0, 0, 800, 600);
    
    // Header
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 32px Arial';
    ctx.fillText('Investment Readiness Score', 50, 80);
    
    // Score
    ctx.fillStyle = '#3b82f6';
    ctx.font = 'bold 48px Arial';
    ctx.fillText(`${scoreResult.totalScore}/999`, 50, 150);
    
    // Categories
    const categories = [
      { name: 'Business Idea', score: scoreResult.businessIdea },
      { name: 'Financials', score: scoreResult.financials },
      { name: 'Team', score: scoreResult.team },
      { name: 'Traction', score: scoreResult.traction }
    ];
    
    ctx.fillStyle = '#64748b';
    ctx.font = '18px Arial';
    categories.forEach((cat, index) => {
      const y = 220 + (index * 40);
      ctx.fillText(`${cat.name}: ${cat.score}/100`, 50, y);
      
      // Progress bar
      ctx.fillStyle = '#e2e8f0';
      ctx.fillRect(250, y - 15, 200, 20);
      ctx.fillStyle = '#3b82f6';
      ctx.fillRect(250, y - 15, (cat.score / 100) * 200, 20);
      ctx.fillStyle = '#64748b';
    });
    
    // Footer
    ctx.fillStyle = '#94a3b8';
    ctx.font = '14px Arial';
    ctx.fillText('Generated by Auricite InvestX', 50, 550);
    
    // Convert to blob and download
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'investment-readiness-score.png';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        toast({
          title: "Downloaded!",
          description: "Results image saved to your downloads",
        });
      }
    });
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" className="flex items-center space-x-2">
          <Share2 className="h-4 w-4" />
          <span>Share Results</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Share Your Results</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Score Summary */}
          <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-semibold">Your Score</h3>
              <Badge className="text-lg px-3 py-1">{scoreResult.totalScore}/999</Badge>
            </div>
            <div className="grid grid-cols-2 gap-2 text-sm">
              <span>Business Idea: {scoreResult.businessIdea}/100</span>
              <span>Financials: {scoreResult.financials}/100</span>
              <span>Team: {scoreResult.team}/100</span>
              <span>Traction: {scoreResult.traction}/100</span>
            </div>
          </div>

          {/* Custom Message */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Custom Message</label>
            <Textarea
              value={customMessage}
              onChange={(e) => setCustomMessage(e.target.value)}
              rows={4}
              placeholder="Add your personal message..."
            />
          </div>

          {/* Share URL */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Shareable Link</label>
            <div className="flex space-x-2">
              <Input
                value={shareUrl || generateShareUrl()}
                readOnly
                className="flex-1"
              />
              <Button
                variant="outline"
                onClick={() => copyToClipboard(shareUrl || generateShareUrl())}
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Share Buttons */}
          <div className="grid grid-cols-2 gap-3">
            <Button onClick={shareViaEmail} className="flex items-center space-x-2">
              <Mail className="h-4 w-4" />
              <span>Email</span>
            </Button>
            
            <Button onClick={shareViaLinkedIn} className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700">
              <Linkedin className="h-4 w-4" />
              <span>LinkedIn</span>
            </Button>
            
            <Button onClick={shareViaTwitter} className="flex items-center space-x-2 bg-blue-400 hover:bg-blue-500">
              <Twitter className="h-4 w-4" />
              <span>Twitter</span>
            </Button>
            
            <Button onClick={downloadResultsImage} variant="outline" className="flex items-center space-x-2">
              <Download className="h-4 w-4" />
              <span>Download Image</span>
            </Button>
          </div>

          {/* QR Code */}
          <div className="text-center">
            <Button
              variant="ghost"
              onClick={() => setShowQRCode(!showQRCode)}
              className="flex items-center space-x-2"
            >
              <QrCode className="h-4 w-4" />
              <span>{showQRCode ? 'Hide' : 'Show'} QR Code</span>
            </Button>
            
            {showQRCode && (
              <div className="mt-4 p-4 bg-white border rounded-lg inline-block">
                <QRCode
                  value={shareUrl || generateShareUrl()}
                  size={150}
                  title="Scan to view assessment results"
                />
                <p className="text-xs text-gray-500 mt-2">Scan to view results</p>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
